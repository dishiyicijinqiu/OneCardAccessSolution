<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:dxmvvm="http://schemas.devexpress.com/winfx/2008/xaml/mvvm"
                    xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core"
                    xmlns:dxe="http://schemas.devexpress.com/winfx/2008/xaml/editors"
	                xmlns:dxgt="clr-namespace:DevExpress.Xpf.Grid.Themes;assembly=DevExpress.Xpf.Grid.v15.1"
                    xmlns:dxrt="http://schemas.devexpress.com/winfx/2008/xaml/ribbon/themekeys"
                    xmlns:local="clr-namespace:FengSharp.OneCardAccess.Client.PC.View"
                    xmlns:ui="clr-namespace:FengSharp.OneCardAccess.Client.PC.UI"
                    xmlns:core="clr-namespace:FengSharp.OneCardAccess.Client.Core"
                    xmlns:dxg="http://schemas.devexpress.com/winfx/2008/xaml/grid" 
                    xmlns:dxr="http://schemas.devexpress.com/winfx/2008/xaml/ribbon">
    <Style TargetType="dxr:RibbonControl">
        <Setter Property="ToolbarShowCustomizationButton" Value="False" />
        <Setter Property="ToolbarShowMode" Value="Hide" />
    </Style>
    <Style TargetType="dxg:GridControl">
        <Setter Property="SelectionMode" Value="Row"/>
        <Setter Property="AutoGenerateColumns" Value="KeepOld"/>
    </Style>
    <Style TargetType="dxg:TableView">
        <Setter Property="ShowGroupPanel" Value="False"/>
        <Setter Property="IndicatorWidth" Value="40"/>
        <Setter Property="AllowEditing" Value="False"/>
        <Setter Property="AllowGrouping" Value="False"/>
    </Style>
    <!--ribonpage放在右侧-->
    <dx:BooleanToDoubleConverter x:Key="opacityConverter" />
    <Style TargetType="{x:Type dxr:RibbonPageGroupsControl}">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="IsHitTestVisible" Value="{Binding Path=Page.IsSelected, RelativeSource={RelativeSource Mode=Self}}"/>
        <Setter Property="Opacity" Value="{Binding Path=Page.IsSelected, RelativeSource={RelativeSource Mode=Self}, Converter={StaticResource opacityConverter}}"/>
        <Setter Property="ItemsPanel" Value="{DynamicResource {dxrt:RibbonThemeKey ResourceKey=PageGroupsControlItemsPanelTemplate}}"/>
        <Setter Property="Template"  Value="{DynamicResource {dxrt:RibbonThemeKey ResourceKey=PageGroupsControlTemplate}}"/>
    </Style>
    <Style TargetType="{x:Type dxr:RibbonPagesControl}">
        <Setter Property="ItemsPanel" Value="{DynamicResource {dxrt:RibbonThemeKey ResourceKey=PagesControlItemsPanelTemplate}}"/>
        <Setter Property="Template"  Value="{DynamicResource {dxrt:RibbonThemeKey ResourceKey=PagesControlTemplate}}"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="IsTabStop" Value="False"/>
    </Style>
    <ItemsPanelTemplate x:Key="{dxrt:RibbonThemeKey ResourceKey=PageGroupsControlItemsPanelTemplate}">
        <ui:MyRibbonPageGroupsItemsPanel />
    </ItemsPanelTemplate>
    <ItemsPanelTemplate x:Key="{dxrt:RibbonThemeKey ResourceKey=PagesControlItemsPanelTemplate}">
        <ui:MyRibbonPagesItemsPanel />
    </ItemsPanelTemplate>
    <!--ribonpage放在右侧-->


    <core:RowHandleConverter x:Key="rowHandleConverter" />
    <DataTemplate x:Key="{dxgt:RowIndicatorThemeKey ResourceKey=IconPresenterTemplate, IsThemeIndependent=True}" >
        <Grid x:Name="rootOfRowIndicator">
            <DockPanel>
                <ContentPresenter x:Name="iconPresenter" Content="{x:Null}"
                                  DockPanel.Dock="Right" Width="auto" 
                                  />
                <TextBlock x:Name="tbRowIndicator" TextAlignment="Center" Width="auto" HorizontalAlignment="Center" VerticalAlignment="Center">
                    <TextBlock.Text>
                        <MultiBinding Mode="OneWay" Converter="{StaticResource rowHandleConverter}">
                            <Binding Path="View.DataControl" />
                            <Binding Path="RowHandle.Value" />
                        </MultiBinding>
                    </TextBlock.Text>
                </TextBlock>
            </DockPanel>
        </Grid>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=IndicatorState}" Value="Focused">
                <Setter Property="ContentTemplate" Value="{DynamicResource {dxgt:RowIndicatorThemeKey ResourceKey=FocusedIconTemplate}}" TargetName="iconPresenter"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=IndicatorState}" Value="Changed">
                <Setter Property="ContentTemplate" Value="{DynamicResource {dxgt:RowIndicatorThemeKey ResourceKey=ChangedIconTemplate}}" TargetName="iconPresenter"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=IndicatorState}" Value="NewItemRow">
                <Setter Property="ContentTemplate" Value="{DynamicResource {dxgt:RowIndicatorThemeKey ResourceKey=NewItemRowIconTemplate}}" TargetName="iconPresenter"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=IndicatorState}" Value="Editing">
                <Setter Property="ContentTemplate" Value="{DynamicResource {dxgt:RowIndicatorThemeKey ResourceKey=EditingIconTemplate}}" TargetName="iconPresenter"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=IndicatorState}" Value="Error">
                <Setter Property="ContentTemplate" Value="{DynamicResource {dxgt:RowIndicatorThemeKey ResourceKey=ErrorIconTemplate}}" TargetName="iconPresenter"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=IndicatorState}" Value="FocusedError">
                <Setter Property="ContentTemplate" Value="{DynamicResource {dxgt:RowIndicatorThemeKey ResourceKey=FocusedErrorIconTemplate}}" TargetName="iconPresenter"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=IndicatorState}" Value="AutoFilterRow">
                <Setter Property="ContentTemplate" Value="{DynamicResource {dxgt:RowIndicatorThemeKey ResourceKey=AutoFilterRowIconTemplate}}" TargetName="iconPresenter"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxe:BaseEdit.HasValidationError)}" Value="True">
                <Setter Property="ToolTip" TargetName="rootOfRowIndicator">
                    <Setter.Value>
                        <DockPanel>
                            <dxe:ErrorControl Content="{Binding Path=(dxe:BaseEdit.ValidationError)}"/>
                            <ContentPresenter VerticalAlignment="Center" Content="{Binding Path=(dxe:BaseEdit.ValidationError).ErrorContent}" />
                        </DockPanel>
                    </Setter.Value>
                </Setter>
            </DataTrigger>

        </DataTemplate.Triggers>
    </DataTemplate>
    <Style TargetType="dxe:TextEdit">
        <Setter Property="MaskUseAsDisplayFormat" Value="True"/>
    </Style>
</ResourceDictionary>