<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:dxr="http://schemas.devexpress.com/winfx/2008/xaml/ribbon"
                    xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core"
                    xmlns:dxb="http://schemas.devexpress.com/winfx/2008/xaml/bars"
                    xmlns:dxe="http://schemas.devexpress.com/winfx/2008/xaml/editors"
                    xmlns:res="clr-namespace:FengSharp.OneCardAccess.Client.PC.Properties"
                    xmlns:core="clr-namespace:FengSharp.OneCardAccess.Core"
	                xmlns:dxgt="clr-namespace:DevExpress.Xpf.Grid.Themes;assembly=DevExpress.Xpf.Grid.v15.1"
                    xmlns:dxg="http://schemas.devexpress.com/winfx/2008/xaml/grid"
                    xmlns:dxc="http://schemas.devexpress.com/winfx/2008/xaml/core"
                    xmlns:dxmvvm="http://schemas.devexpress.com/winfx/2008/xaml/mvvm"
                    >
    <core:EditModeVisibleConverter x:Key="editModeVisibleConverter"/>
    <dxc:EventArgsToDataRowConverter x:Key="eventArgsToDataRowConverter"/>

    <Style TargetType="{x:Type dxr:DXRibbonWindow}" x:Key="DialogWindowStyle">
        <Setter Property="WindowStyle" Value="None"/>
        <Setter Property="ResizeMode" Value="NoResize"/>
        <Setter Property="SizeToContent" Value="WidthAndHeight"/>
        <Setter Property="ShowInTaskbar" Value="False"/>
    </Style>

    <Style TargetType="dxb:BarButtonItem" x:Key="barAdd">
        <Setter Property="Content" Value="{x:Static res:Resources.BarContent_Add}"/>
        <Setter Property="Command" Value="{Binding AddCommand}"/>
        <Setter Property="Glyph" Value="/FengSharp.OneCardAccess.Client.PC;component/Resources/Images/Bar/new_16x16.png"/>
        <Setter Property="LargeGlyph" Value="/FengSharp.OneCardAccess.Client.PC;component/Resources/Images/Bar/new_32x32.png"/>
    </Style>
    <Style TargetType="dxb:BarButtonItem" x:Key="barCopyAdd">
        <Setter Property="Content" Value="{x:Static res:Resources.BarContent_CopyAdd}"/>
        <Setter Property="Command" Value="{Binding CopyAddCommand}"/>
        <Setter Property="Glyph" Value="/FengSharp.OneCardAccess.Client.PC;component/Resources/Images/Bar/copy-16x16.png"/>
        <Setter Property="LargeGlyph" Value="/FengSharp.OneCardAccess.Client.PC;component/Resources/Images/Bar/copy-32x32.png"/>
    </Style>
    <Style TargetType="dxb:BarButtonItem" x:Key="barEdit">
        <Setter Property="Content" Value="{x:Static res:Resources.BarContent_Edit}"/>
        <Setter Property="Command" Value="{Binding EditCommand}"/>
        <Setter Property="Glyph" Value="/FengSharp.OneCardAccess.Client.PC;component/Resources/Images/Bar/edit_16x16.png"/>
        <Setter Property="LargeGlyph" Value="/FengSharp.OneCardAccess.Client.PC;component/Resources/Images/Bar/edit_32x32.png"/>
    </Style>
    <Style TargetType="dxb:BarButtonItem" x:Key="barDelete">
        <Setter Property="Content" Value="{x:Static res:Resources.BarContent_Delete}"/>
        <Setter Property="Command" Value="{Binding DeleteCommand}"/>
        <Setter Property="Glyph" Value="/FengSharp.OneCardAccess.Client.PC;component/Resources/Images/Bar/delete_16x16.png"/>
        <Setter Property="LargeGlyph" Value="/FengSharp.OneCardAccess.Client.PC;component/Resources/Images/Bar/delete_32x32.png"/>
    </Style>
    <Style TargetType="dxb:BarButtonItem" x:Key="barCate">
        <Setter Property="Content" Value="{x:Static res:Resources.BarContent_Cate}"/>
        <Setter Property="Command" Value="{Binding CateCommand}"/>
        <Setter Property="Glyph" Value="/FengSharp.OneCardAccess.Client.PC;component/Resources/Images/Bar/cards_16x16.png"/>
        <Setter Property="LargeGlyph" Value="/FengSharp.OneCardAccess.Client.PC;component/Resources/Images/Bar/cards_32x32.png"/>
    </Style>
    <Style TargetType="dxb:BarButtonItem" x:Key="barReturn">
        <Setter Property="Content" Value="{x:Static res:Resources.BarContent_Return}"/>
        <Setter Property="Command" Value="{Binding ReturnCommand}"/>
        <Setter Property="Glyph" Value="/FengSharp.OneCardAccess.Client.PC;component/Resources/Images/Bar/moveup_16x16.png"/>
        <Setter Property="LargeGlyph" Value="/FengSharp.OneCardAccess.Client.PC;component/Resources/Images/Bar/moveup_32x32.png"/>
    </Style>
    <Style TargetType="dxb:BarButtonItem" x:Key="barSave">
        <Setter Property="Content" Value="{x:Static res:Resources.BarContent_Save}"/>
        <Setter Property="Command" Value="{Binding SaveCommand}"/>
        <Setter Property="Glyph" Value="/FengSharp.OneCardAccess.Client.PC;component/Resources/Images/Bar/save_16x16.png"/>
        <Setter Property="LargeGlyph" Value="/FengSharp.OneCardAccess.Client.PC;component/Resources/Images/Bar/save_32x32.png"/>
    </Style>
    <Style TargetType="dxb:BarButtonItem" x:Key="barSaveAndNew">
        <Setter Property="Content" Value="{x:Static res:Resources.BarContent_SaveAndNew}"/>
        <Setter Property="Command" Value="{Binding barSaveAndNewCommand}"/>
        <Setter Property="Glyph" Value="/FengSharp.OneCardAccess.Client.PC;component/Resources/Images/Bar/saveandnew_16x16.png"/>
        <Setter Property="LargeGlyph" Value="/FengSharp.OneCardAccess.Client.PC;component/Resources/Images/Bar/saveandnew_32x32.png"/>
    </Style>
    <Style TargetType="dxb:BarButtonItem" x:Key="barClose">
        <Setter Property="Content" Value="{x:Static res:Resources.BarContent_Close}"/>
        <Setter Property="Command" Value="{Binding CloseCommand}"/>
        <Setter Property="Glyph" Value="/FengSharp.OneCardAccess.Client.PC;component/Resources/Images/Bar/close_16x16.png"/>
        <Setter Property="LargeGlyph" Value="/FengSharp.OneCardAccess.Client.PC;component/Resources/Images/Bar/close_32x32.png"/>
    </Style>
    <Style TargetType="dxb:BarButtonItem" x:Key="barUpLoad">
        <Setter Property="Content" Value="{x:Static res:Resources.BarContent_UpLoad}"/>
        <Setter Property="Command" Value="{Binding UpLoadCommand}"/>
        <Setter Property="Glyph" Value="/FengSharp.OneCardAccess.Client.PC;component/Resources/Images/Bar/up_16x16.png"/>
        <Setter Property="LargeGlyph" Value="/FengSharp.OneCardAccess.Client.PC;component/Resources/Images/Bar/up_32x32.png"/>
    </Style>
    <Style TargetType="dxb:BarButtonItem" x:Key="barMoveUp">
        <Setter Property="Content" Value="{x:Static res:Resources.BarContent_MoveUp}"/>
        <Setter Property="Command" Value="{Binding MoveUpCommand}"/>
        <Setter Property="Glyph" Value="/FengSharp.OneCardAccess.Client.PC;component/Resources/Images/Bar/moveup_16x16.png"/>
        <Setter Property="LargeGlyph" Value="/FengSharp.OneCardAccess.Client.PC;component/Resources/Images/Bar/moveup_32x32.png"/>
    </Style>
    <Style TargetType="dxb:BarButtonItem" x:Key="barMoveDown">
        <Setter Property="Content" Value="{x:Static res:Resources.BarContent_MoveDown}"/>
        <Setter Property="Command" Value="{Binding MoveDownCommand}"/>
        <Setter Property="Glyph" Value="/FengSharp.OneCardAccess.Client.PC;component/Resources/Images/Bar/movedown_16x16.png"/>
        <Setter Property="LargeGlyph" Value="/FengSharp.OneCardAccess.Client.PC;component/Resources/Images/Bar/movedown_32x32.png"/>
    </Style>
    <Style TargetType="dxe:TextEdit" x:Key="teCreateDate">
        <Setter Property="MaskUseAsDisplayFormat" Value="True"/>
        <Setter Property="IsReadOnly" Value="True"/>
        <Setter Property="MaskType" Value="DateTime"/>
        <Setter Property="Mask" Value="yyyy年MM月dd日 HH:mm:ss"/>
    </Style>
    <Style TargetType="dxe:TextEdit" x:Key="teLastModifyDate">
        <Setter Property="MaskUseAsDisplayFormat" Value="True"/>
        <Setter Property="IsReadOnly" Value="True"/>
        <Setter Property="MaskType" Value="DateTime"/>
        <Setter Property="Mask" Value="yyyy年MM月dd日 HH:mm:ss"/>
    </Style>

    <core:CateRowHandleConverter x:Key="cateRowHandleConverter" />
    <DataTemplate x:Key="CateRowIndicatorThemeKey" >
        <Grid x:Name="rootOfRowIndicator">
            <DockPanel>
                <ContentPresenter x:Name="iconPresenter" Content="{x:Null}"
                                  DockPanel.Dock="Right" Width="auto" 
                                  />
                <TextBlock x:Name="tbRowIndicator" TextAlignment="Center" Width="auto" HorizontalAlignment="Center" VerticalAlignment="Center">
                    <TextBlock.Text>
                        <MultiBinding Mode="OneWay" Converter="{StaticResource cateRowHandleConverter}">
                            <Binding Path="View.DataControl" />
                            <Binding Path="RowHandle.Value" />
                        </MultiBinding>
                    </TextBlock.Text>
                </TextBlock>
            </DockPanel>
        </Grid>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=IndicatorState}" Value="Focused">
                <Setter Property="ContentTemplate" Value="{DynamicResource {dxgt:RowIndicatorThemeKey ResourceKey=FocusedIconTemplate}}" TargetName="iconPresenter"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=IndicatorState}" Value="Changed">
                <Setter Property="ContentTemplate" Value="{DynamicResource {dxgt:RowIndicatorThemeKey ResourceKey=ChangedIconTemplate}}" TargetName="iconPresenter"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=IndicatorState}" Value="NewItemRow">
                <Setter Property="ContentTemplate" Value="{DynamicResource {dxgt:RowIndicatorThemeKey ResourceKey=NewItemRowIconTemplate}}" TargetName="iconPresenter"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=IndicatorState}" Value="Editing">
                <Setter Property="ContentTemplate" Value="{DynamicResource {dxgt:RowIndicatorThemeKey ResourceKey=EditingIconTemplate}}" TargetName="iconPresenter"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=IndicatorState}" Value="Error">
                <Setter Property="ContentTemplate" Value="{DynamicResource {dxgt:RowIndicatorThemeKey ResourceKey=ErrorIconTemplate}}" TargetName="iconPresenter"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=IndicatorState}" Value="FocusedError">
                <Setter Property="ContentTemplate" Value="{DynamicResource {dxgt:RowIndicatorThemeKey ResourceKey=FocusedErrorIconTemplate}}" TargetName="iconPresenter"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=IndicatorState}" Value="AutoFilterRow">
                <Setter Property="ContentTemplate" Value="{DynamicResource {dxgt:RowIndicatorThemeKey ResourceKey=AutoFilterRowIconTemplate}}" TargetName="iconPresenter"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxe:BaseEdit.HasValidationError)}" Value="True">
                <Setter Property="ToolTip" TargetName="rootOfRowIndicator">
                    <Setter.Value>
                        <DockPanel>
                            <dxe:ErrorControl Content="{Binding Path=(dxe:BaseEdit.ValidationError)}"/>
                            <ContentPresenter VerticalAlignment="Center" Content="{Binding Path=(dxe:BaseEdit.ValidationError).ErrorContent}" />
                        </DockPanel>
                    </Setter.Value>
                </Setter>
            </DataTrigger>

        </DataTemplate.Triggers>
    </DataTemplate>
    <!--<Setter Property="RowIndicatorContentTemplate" Value="{DynamicResource {dxgt:RowIndicatorThemeKey ResourceKey=IconPresenterTemplate}}" />-->

    <!--<Style TargetType="dxg:GridControl" x:Key="GridControlDoubleClickStyle">
        <Setter Property="dxmvvm:Interaction.BehaviorsTemplate">
            <Setter.Value>
                <DataTemplate>
                    <ContentControl>
                        <dxmvvm:EventToCommand PassEventArgsToCommand="True" Command="{Binding MouseDoubleClickCommand}" EventName="MouseDoubleClick">
                            <dxmvvm:EventToCommand.EventArgsConverter>
                                <dxc:EventArgsToDataRowConverter/>
                            </dxmvvm:EventToCommand.EventArgsConverter>
                        </dxmvvm:EventToCommand>
                    </ContentControl>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>-->
    <!--<Style TargetType="{x:Type dxr:DXRibbonWindow}" x:Key="EditWindowStyle">
        <Setter Property="ResizeMode" Value="NoResize"/>
        <Setter Property="WindowStyle" Value="None"/>
    </Style>
    <Style TargetType="UserControl" x:Key="EditUserControlStyle">
        <Setter Property="dxmvvm:Interaction.BehaviorsTemplate">
            <Setter.Value>
                <DataTemplate>
                    <ContentControl>
                        <dxmvvm:WindowService WindowType="{x:Type dxr:DXRibbonWindow}" WindowStyle="{DynamicResource ResourceKey=EditWindowStyle}"  WindowStartupLocation="CenterOwner" WindowShowMode="Dialog"/>
                    </ContentControl>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>-->
    <!--<ControlTemplate x:Key="mymvvm">
        <UserControl>
            <dxmvvm:Interaction.Behaviors>
                <dxmvvm:WindowService 
            WindowType="{x:Type dxr:DXRibbonWindow}"
            WindowStartupLocation="CenterOwner"
                              WindowShowMode="Dialog"
                              WindowStyle="{StaticResource EditWindowStyle}"/>
            </dxmvvm:Interaction.Behaviors>
        </UserControl>
    </ControlTemplate>-->

    <!--<dxmvvm:WindowService Name="EditWindowService" WindowType="{x:Type dxr:DXRibbonWindow}"
                              WindowStartupLocation="CenterOwner"
                              WindowShowMode="Dialog">

    </dxmvvm:WindowService>-->



    <!--<Style TargetType="{x:Type Window}" x:Key="aaaEditWindowStyle">
        <Setter Property="ResizeMode" Value="NoResize"/>
        <Setter Property="WindowStyle" Value="None"/>
    </Style>-->


    <!--<Style x:Key="EditWindowService" TargetType="dxmvvm:WindowService">
        <Setter Property="WindowStartupLocation" Value="CenterOwner" />
        <Setter Property="WindowShowMode" Value="Dialog" />
        <Setter Property="WindowStyle" Value="{StaticResource EditWindowStyle}"/>
    </Style>-->
    <!--<Style TargetType="{x:Type dxr:DXRibbonWindow}" x:Key="EditWindowStyle">
        <Setter Property="ResizeMode" Value="NoResize"/>
        <Setter Property="WindowStyle" Value="None"/>
    </Style>-->


    <!--<dxmvvm:Interaction.Behaviors>
        <dxmvvm:WindowService 
            WindowType="{x:Type dxr:DXRibbonWindow}"
            WindowStartupLocation="CenterOwner"
                              WindowShowMode="Dialog"
                              WindowStyle="{StaticResource EditWindowStyle}">
        </dxmvvm:WindowService>
        <dx:DXMessageBoxService/>
    </dxmvvm:Interaction.Behaviors>-->
    <!--<Style TargetType="UserControl" x:Key="usercontrolstyle">
        <Setter Property="dxmvvm:Interaction.BehaviorsTemplate">
            <Setter.Value>
                <DataTemplate>
                    <ContentControl>
                        <dxmvvm:WindowService 
            WindowType="{x:Type dxr:DXRibbonWindow}"
            WindowStartupLocation="CenterOwner"
                              WindowShowMode="Dialog"
                              WindowStyle="{StaticResource EditWindowStyle}">
                        </dxmvvm:WindowService>
                    </ContentControl>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>-->
</ResourceDictionary>