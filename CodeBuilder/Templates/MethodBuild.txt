
--商品表
select c.CommodityId,c.CommodityNo,c.CommodityName,c.CommodityImage,c.Unit,c.Material,c.PackQty,c.ProductType,c.GoodCode,
	 c.CertType,c.RegisterId,c.DrawingId,c.QtyMode,c.Remark1,c.Remark2,c.Remark3,c.Remark4,c.Remark5,c.Remark6,c.Remark7,
	 c.Remark8,c.TreeNo,c.TreeParentNo,c.TreePath,c.TreeSon,c.SkuSon,c.CreateId,c.CreateDate,c.LastModifyId,c.LastModifyDate,
	 c.Deleted
from T_Commodity c
where CommodityId=CommodityId

CommodityId,CommodityNo,CommodityName,CommodityImage,Unit,Material,PackQty,ProductType,GoodCode,CertType,RegisterId,DrawingId,QtyMode,Remark1,Remark2,Remark3,Remark4,Remark5,Remark6,Remark7,Remark8,TreeNo,TreeParentNo,TreePath,TreeSon,SkuSon,CreateId,CreateDate,LastModifyId,LastModifyDate,Deleted,
@CommodityId,@CommodityNo,@CommodityName,@CommodityImage,@Unit,@Material,@PackQty,@ProductType,@GoodCode,@CertType,@RegisterId,@DrawingId,@QtyMode,@Remark1,@Remark2,@Remark3,@Remark4,@Remark5,@Remark6,@Remark7,@Remark8,@TreeNo,@TreeParentNo,@TreePath,@TreeSon,@SkuSon,@CreateId,@CreateDate,@LastModifyId,@LastModifyDate,@Deleted,


sbSql.Append("CommodityId=@CommodityId, ");
sbSql.Append("CommodityNo=@CommodityNo, ");
sbSql.Append("CommodityName=@CommodityName, ");
sbSql.Append("CommodityImage=@CommodityImage, ");
sbSql.Append("Unit=@Unit, ");
sbSql.Append("Material=@Material, ");
sbSql.Append("PackQty=@PackQty, ");
sbSql.Append("ProductType=@ProductType, ");
sbSql.Append("GoodCode=@GoodCode, ");
sbSql.Append("CertType=@CertType, ");
sbSql.Append("RegisterId=@RegisterId, ");
sbSql.Append("DrawingId=@DrawingId, ");
sbSql.Append("QtyMode=@QtyMode, ");
sbSql.Append("Remark1=@Remark1, ");
sbSql.Append("Remark2=@Remark2, ");
sbSql.Append("Remark3=@Remark3, ");
sbSql.Append("Remark4=@Remark4, ");
sbSql.Append("Remark5=@Remark5, ");
sbSql.Append("Remark6=@Remark6, ");
sbSql.Append("Remark7=@Remark7, ");
sbSql.Append("Remark8=@Remark8, ");
sbSql.Append("TreeNo=@TreeNo, ");
sbSql.Append("TreeParentNo=@TreeParentNo, ");
sbSql.Append("TreePath=@TreePath, ");
sbSql.Append("TreeSon=@TreeSon, ");
sbSql.Append("SkuSon=@SkuSon, ");
sbSql.Append("CreateId=@CreateId, ");
sbSql.Append("CreateDate=@CreateDate, ");
sbSql.Append("LastModifyId=@LastModifyId, ");
sbSql.Append("LastModifyDate=@LastModifyDate, ");
sbSql.Append("Deleted=@Deleted, ");

Database.AddInParameter(cmd, "CommodityId", DbType.string, model.CommodityId);
Database.AddInParameter(cmd, "CommodityNo", DbType.string, model.CommodityNo);
Database.AddInParameter(cmd, "CommodityName", DbType.string, model.CommodityName);
Database.AddInParameter(cmd, "CommodityImage", DbType.string, model.CommodityImage);
Database.AddInParameter(cmd, "Unit", DbType.string, model.Unit);
Database.AddInParameter(cmd, "Material", DbType.string, model.Material);
Database.AddInParameter(cmd, "PackQty", DbType.int, model.PackQty);
Database.AddInParameter(cmd, "ProductType", DbType.short, model.ProductType);
Database.AddInParameter(cmd, "GoodCode", DbType.string, model.GoodCode);
Database.AddInParameter(cmd, "CertType", DbType.short, model.CertType);
Database.AddInParameter(cmd, "RegisterId", DbType.string, model.RegisterId);
Database.AddInParameter(cmd, "DrawingId", DbType.string, model.DrawingId);
Database.AddInParameter(cmd, "QtyMode", DbType.short, model.QtyMode);
Database.AddInParameter(cmd, "Remark1", DbType.string, model.Remark1);
Database.AddInParameter(cmd, "Remark2", DbType.string, model.Remark2);
Database.AddInParameter(cmd, "Remark3", DbType.string, model.Remark3);
Database.AddInParameter(cmd, "Remark4", DbType.string, model.Remark4);
Database.AddInParameter(cmd, "Remark5", DbType.string, model.Remark5);
Database.AddInParameter(cmd, "Remark6", DbType.string, model.Remark6);
Database.AddInParameter(cmd, "Remark7", DbType.string, model.Remark7);
Database.AddInParameter(cmd, "Remark8", DbType.string, model.Remark8);
Database.AddInParameter(cmd, "TreeNo", DbType.string, model.TreeNo);
Database.AddInParameter(cmd, "TreeParentNo", DbType.string, model.TreeParentNo);
Database.AddInParameter(cmd, "TreePath", DbType.string, model.TreePath);
Database.AddInParameter(cmd, "TreeSon", DbType.int, model.TreeSon);
Database.AddInParameter(cmd, "SkuSon", DbType.int, model.SkuSon);
Database.AddInParameter(cmd, "CreateId", DbType.string, model.CreateId);
Database.AddInParameter(cmd, "CreateDate", DbType.DateTime, model.CreateDate);
Database.AddInParameter(cmd, "LastModifyId", DbType.string, model.LastModifyId);
Database.AddInParameter(cmd, "LastModifyDate", DbType.DateTime, model.LastModifyDate);
Database.AddInParameter(cmd, "Deleted", DbType.bool, model.Deleted);


	<dxlc:LayoutItem Label="{x:Static res:Resources.Entity_Commodity_CommodityNo}">
		<dxe:TextEdit EditValue="{Binding CommodityNo, NotifyOnSourceUpdated=True, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}"/>
	</dxlc:LayoutItem>
	<dxlc:LayoutItem Label="{x:Static res:Resources.Entity_Commodity_CommodityName}">
		<dxe:TextEdit EditValue="{Binding CommodityName, NotifyOnSourceUpdated=True, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}"/>
	</dxlc:LayoutItem>
	<dxlc:LayoutItem Label="{x:Static res:Resources.Entity_Commodity_CommodityImage}">
		<dxe:TextEdit EditValue="{Binding CommodityImage, NotifyOnSourceUpdated=True, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}"/>
	</dxlc:LayoutItem>
	<dxlc:LayoutItem Label="{x:Static res:Resources.Entity_Commodity_Unit}">
		<dxe:TextEdit EditValue="{Binding Unit, NotifyOnSourceUpdated=True, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}"/>
	</dxlc:LayoutItem>
	<dxlc:LayoutItem Label="{x:Static res:Resources.Entity_Commodity_Material}">
		<dxe:TextEdit EditValue="{Binding Material, NotifyOnSourceUpdated=True, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}"/>
	</dxlc:LayoutItem>
	<dxlc:LayoutItem Label="{x:Static res:Resources.Entity_Commodity_PackQty}">
		<dxe:TextEdit EditValue="{Binding PackQty, NotifyOnSourceUpdated=True, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}"/>
	</dxlc:LayoutItem>
	<dxlc:LayoutItem Label="{x:Static res:Resources.Entity_Commodity_ProductType}">
		<dxe:TextEdit EditValue="{Binding ProductType, NotifyOnSourceUpdated=True, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}"/>
	</dxlc:LayoutItem>
	<dxlc:LayoutItem Label="{x:Static res:Resources.Entity_Commodity_GoodCode}">
		<dxe:TextEdit EditValue="{Binding GoodCode, NotifyOnSourceUpdated=True, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}"/>
	</dxlc:LayoutItem>
	<dxlc:LayoutItem Label="{x:Static res:Resources.Entity_Commodity_CertType}">
		<dxe:TextEdit EditValue="{Binding CertType, NotifyOnSourceUpdated=True, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}"/>
	</dxlc:LayoutItem>
	<dxlc:LayoutItem Label="{x:Static res:Resources.Entity_Commodity_RegisterId}">
		<dxe:TextEdit EditValue="{Binding RegisterId, NotifyOnSourceUpdated=True, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}"/>
	</dxlc:LayoutItem>
	<dxlc:LayoutItem Label="{x:Static res:Resources.Entity_Commodity_DrawingId}">
		<dxe:TextEdit EditValue="{Binding DrawingId, NotifyOnSourceUpdated=True, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}"/>
	</dxlc:LayoutItem>
	<dxlc:LayoutItem Label="{x:Static res:Resources.Entity_Commodity_QtyMode}">
		<dxe:TextEdit EditValue="{Binding QtyMode, NotifyOnSourceUpdated=True, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}"/>
	</dxlc:LayoutItem>
	<dxlc:LayoutItem Label="{x:Static res:Resources.Entity_Commodity_Remark1}">
		<dxe:TextEdit EditValue="{Binding Remark1, NotifyOnSourceUpdated=True, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}"/>
	</dxlc:LayoutItem>
	<dxlc:LayoutItem Label="{x:Static res:Resources.Entity_Commodity_Remark2}">
		<dxe:TextEdit EditValue="{Binding Remark2, NotifyOnSourceUpdated=True, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}"/>
	</dxlc:LayoutItem>
	<dxlc:LayoutItem Label="{x:Static res:Resources.Entity_Commodity_Remark3}">
		<dxe:TextEdit EditValue="{Binding Remark3, NotifyOnSourceUpdated=True, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}"/>
	</dxlc:LayoutItem>
	<dxlc:LayoutItem Label="{x:Static res:Resources.Entity_Commodity_Remark4}">
		<dxe:TextEdit EditValue="{Binding Remark4, NotifyOnSourceUpdated=True, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}"/>
	</dxlc:LayoutItem>
	<dxlc:LayoutItem Label="{x:Static res:Resources.Entity_Commodity_Remark5}">
		<dxe:TextEdit EditValue="{Binding Remark5, NotifyOnSourceUpdated=True, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}"/>
	</dxlc:LayoutItem>
	<dxlc:LayoutItem Label="{x:Static res:Resources.Entity_Commodity_Remark6}">
		<dxe:TextEdit EditValue="{Binding Remark6, NotifyOnSourceUpdated=True, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}"/>
	</dxlc:LayoutItem>
	<dxlc:LayoutItem Label="{x:Static res:Resources.Entity_Commodity_Remark7}">
		<dxe:TextEdit EditValue="{Binding Remark7, NotifyOnSourceUpdated=True, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}"/>
	</dxlc:LayoutItem>
	<dxlc:LayoutItem Label="{x:Static res:Resources.Entity_Commodity_Remark8}">
		<dxe:TextEdit EditValue="{Binding Remark8, NotifyOnSourceUpdated=True, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}"/>
	</dxlc:LayoutItem>
	<dxlc:LayoutItem Label="{x:Static res:Resources.Entity_Commodity_TreeNo}">
		<dxe:TextEdit EditValue="{Binding TreeNo, NotifyOnSourceUpdated=True, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}"/>
	</dxlc:LayoutItem>
	<dxlc:LayoutItem Label="{x:Static res:Resources.Entity_Commodity_TreeParentNo}">
		<dxe:TextEdit EditValue="{Binding TreeParentNo, NotifyOnSourceUpdated=True, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}"/>
	</dxlc:LayoutItem>
	<dxlc:LayoutItem Label="{x:Static res:Resources.Entity_Commodity_TreePath}">
		<dxe:TextEdit EditValue="{Binding TreePath, NotifyOnSourceUpdated=True, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}"/>
	</dxlc:LayoutItem>
	<dxlc:LayoutItem Label="{x:Static res:Resources.Entity_Commodity_TreeSon}">
		<dxe:TextEdit EditValue="{Binding TreeSon, NotifyOnSourceUpdated=True, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}"/>
	</dxlc:LayoutItem>
	<dxlc:LayoutItem Label="{x:Static res:Resources.Entity_Commodity_SkuSon}">
		<dxe:TextEdit EditValue="{Binding SkuSon, NotifyOnSourceUpdated=True, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}"/>
	</dxlc:LayoutItem>
	<dxlc:LayoutItem Label="{x:Static res:Resources.Entity_Commodity_Creater}">
		<dxe:TextEdit EditValue="{Binding Creater}"  Style="{StaticResource teCreateDate}"/>
	</dxlc:LayoutItem>
	<dxlc:LayoutItem Label="{x:Static res:Resources.Entity_Commodity_CreateDate}">
		<dxe:TextEdit EditValue="{Binding CreateDate, NotifyOnSourceUpdated=True, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}"/>
	</dxlc:LayoutItem>
	<dxlc:LayoutItem Label="{x:Static res:Resources.Entity_Commodity_LastModifyer}">
		<dxe:TextEdit EditValue="{Binding LastModifyer}" Style="{StaticResource teLastModifyDate}"/>
	</dxlc:LayoutItem>
	<dxlc:LayoutItem Label="{x:Static res:Resources.Entity_Commodity_LastModifyDate}">
		<dxe:TextEdit EditValue="{Binding LastModifyDate, NotifyOnSourceUpdated=True, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}"/>
	</dxlc:LayoutItem>



		public string CommodityNo
        {
            get
            {
                return Entity.CommodityNo;
            }
            set
            {
                if (Entity.CommodityNo != value)
                {
                    Entity.CommodityNo = value;
                    RaisePropertyChanged("CommodityNo");
                }
            }
        }
		public string CommodityName
        {
            get
            {
                return Entity.CommodityName;
            }
            set
            {
                if (Entity.CommodityName != value)
                {
                    Entity.CommodityName = value;
                    RaisePropertyChanged("CommodityName");
                }
            }
        }
		public string CommodityImage
        {
            get
            {
                return Entity.CommodityImage;
            }
            set
            {
                if (Entity.CommodityImage != value)
                {
                    Entity.CommodityImage = value;
                    RaisePropertyChanged("CommodityImage");
                }
            }
        }
		public string Unit
        {
            get
            {
                return Entity.Unit;
            }
            set
            {
                if (Entity.Unit != value)
                {
                    Entity.Unit = value;
                    RaisePropertyChanged("Unit");
                }
            }
        }
		public string Material
        {
            get
            {
                return Entity.Material;
            }
            set
            {
                if (Entity.Material != value)
                {
                    Entity.Material = value;
                    RaisePropertyChanged("Material");
                }
            }
        }
		public int PackQty
        {
            get
            {
                return Entity.PackQty;
            }
            set
            {
                if (Entity.PackQty != value)
                {
                    Entity.PackQty = value;
                    RaisePropertyChanged("PackQty");
                }
            }
        }
		public short ProductType
        {
            get
            {
                return Entity.ProductType;
            }
            set
            {
                if (Entity.ProductType != value)
                {
                    Entity.ProductType = value;
                    RaisePropertyChanged("ProductType");
                }
            }
        }
		public string GoodCode
        {
            get
            {
                return Entity.GoodCode;
            }
            set
            {
                if (Entity.GoodCode != value)
                {
                    Entity.GoodCode = value;
                    RaisePropertyChanged("GoodCode");
                }
            }
        }
		public short CertType
        {
            get
            {
                return Entity.CertType;
            }
            set
            {
                if (Entity.CertType != value)
                {
                    Entity.CertType = value;
                    RaisePropertyChanged("CertType");
                }
            }
        }
		public string RegisterId
        {
            get
            {
                return Entity.RegisterId;
            }
            set
            {
                if (Entity.RegisterId != value)
                {
                    Entity.RegisterId = value;
                    RaisePropertyChanged("RegisterId");
                }
            }
        }
		public string DrawingId
        {
            get
            {
                return Entity.DrawingId;
            }
            set
            {
                if (Entity.DrawingId != value)
                {
                    Entity.DrawingId = value;
                    RaisePropertyChanged("DrawingId");
                }
            }
        }
		public short QtyMode
        {
            get
            {
                return Entity.QtyMode;
            }
            set
            {
                if (Entity.QtyMode != value)
                {
                    Entity.QtyMode = value;
                    RaisePropertyChanged("QtyMode");
                }
            }
        }
		public string Remark1
        {
            get
            {
                return Entity.Remark1;
            }
            set
            {
                if (Entity.Remark1 != value)
                {
                    Entity.Remark1 = value;
                    RaisePropertyChanged("Remark1");
                }
            }
        }
		public string Remark2
        {
            get
            {
                return Entity.Remark2;
            }
            set
            {
                if (Entity.Remark2 != value)
                {
                    Entity.Remark2 = value;
                    RaisePropertyChanged("Remark2");
                }
            }
        }
		public string Remark3
        {
            get
            {
                return Entity.Remark3;
            }
            set
            {
                if (Entity.Remark3 != value)
                {
                    Entity.Remark3 = value;
                    RaisePropertyChanged("Remark3");
                }
            }
        }
		public string Remark4
        {
            get
            {
                return Entity.Remark4;
            }
            set
            {
                if (Entity.Remark4 != value)
                {
                    Entity.Remark4 = value;
                    RaisePropertyChanged("Remark4");
                }
            }
        }
		public string Remark5
        {
            get
            {
                return Entity.Remark5;
            }
            set
            {
                if (Entity.Remark5 != value)
                {
                    Entity.Remark5 = value;
                    RaisePropertyChanged("Remark5");
                }
            }
        }
		public string Remark6
        {
            get
            {
                return Entity.Remark6;
            }
            set
            {
                if (Entity.Remark6 != value)
                {
                    Entity.Remark6 = value;
                    RaisePropertyChanged("Remark6");
                }
            }
        }
		public string Remark7
        {
            get
            {
                return Entity.Remark7;
            }
            set
            {
                if (Entity.Remark7 != value)
                {
                    Entity.Remark7 = value;
                    RaisePropertyChanged("Remark7");
                }
            }
        }
		public string Remark8
        {
            get
            {
                return Entity.Remark8;
            }
            set
            {
                if (Entity.Remark8 != value)
                {
                    Entity.Remark8 = value;
                    RaisePropertyChanged("Remark8");
                }
            }
        }
		public string TreeNo
        {
            get
            {
                return Entity.TreeNo;
            }
            set
            {
                if (Entity.TreeNo != value)
                {
                    Entity.TreeNo = value;
                    RaisePropertyChanged("TreeNo");
                }
            }
        }
		public string TreeParentNo
        {
            get
            {
                return Entity.TreeParentNo;
            }
            set
            {
                if (Entity.TreeParentNo != value)
                {
                    Entity.TreeParentNo = value;
                    RaisePropertyChanged("TreeParentNo");
                }
            }
        }
		public string TreePath
        {
            get
            {
                return Entity.TreePath;
            }
            set
            {
                if (Entity.TreePath != value)
                {
                    Entity.TreePath = value;
                    RaisePropertyChanged("TreePath");
                }
            }
        }
		public int TreeSon
        {
            get
            {
                return Entity.TreeSon;
            }
            set
            {
                if (Entity.TreeSon != value)
                {
                    Entity.TreeSon = value;
                    RaisePropertyChanged("TreeSon");
                }
            }
        }
		public int SkuSon
        {
            get
            {
                return Entity.SkuSon;
            }
            set
            {
                if (Entity.SkuSon != value)
                {
                    Entity.SkuSon = value;
                    RaisePropertyChanged("SkuSon");
                }
            }
        }
		public string Creater
        {
            get
            {
                return Entity.Creater;
            }
            set
            {
                if (Entity.Creater != value)
                {
                    Entity.Creater = value;
                    RaisePropertyChanged("Creater");
                }
            }
        }
		public DateTime CreateDate
        {
            get
            {
                return Entity.CreateDate;
            }
            set
            {
                if (Entity.CreateDate != value)
                {
                    Entity.CreateDate = value;
                    RaisePropertyChanged("CreateDate");
                }
            }
        }
		public string LastModifyer
        {
            get
            {
                return Entity.LastModifyer;
            }
            set
            {
                if (Entity.LastModifyer != value)
                {
                    Entity.LastModifyer = value;
                    RaisePropertyChanged("LastModifyer");
                }
            }
        }
		public DateTime LastModifyDate
        {
            get
            {
                return Entity.LastModifyDate;
            }
            set
            {
                if (Entity.LastModifyDate != value)
                {
                    Entity.LastModifyDate = value;
                    RaisePropertyChanged("LastModifyDate");
                }
            }
        }


