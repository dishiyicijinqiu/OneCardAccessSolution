
--产品检验报告模板
select P_CRTempId,CRTempName,CRTempPath,MaterIden,IsEnable,CateNo,Remark,CreateId,CreateDate,LastModifyId,
	 LastModifyDate,Deleted
from T_P_CRTemp 
where P_CRTempId=P_CRTempId

P_CRTempId,CRTempName,CRTempPath,MaterIden,IsEnable,CateNo,Remark,CreateId,CreateDate,LastModifyId,LastModifyDate,Deleted,
@P_CRTempId,@CRTempName,@CRTempPath,@MaterIden,@IsEnable,@CateNo,@Remark,@CreateId,@CreateDate,@LastModifyId,@LastModifyDate,@Deleted,


sbSql.Append("P_CRTempId=@P_CRTempId, ");
sbSql.Append("CRTempName=@CRTempName, ");
sbSql.Append("CRTempPath=@CRTempPath, ");
sbSql.Append("MaterIden=@MaterIden, ");
sbSql.Append("IsEnable=@IsEnable, ");
sbSql.Append("CateNo=@CateNo, ");
sbSql.Append("Remark=@Remark, ");
sbSql.Append("CreateId=@CreateId, ");
sbSql.Append("CreateDate=@CreateDate, ");
sbSql.Append("LastModifyId=@LastModifyId, ");
sbSql.Append("LastModifyDate=@LastModifyDate, ");
sbSql.Append("Deleted=@Deleted, ");

Database.AddInParameter(cmd, "P_CRTempId", DbType.string, model.P_CRTempId);
Database.AddInParameter(cmd, "CRTempName", DbType.string, model.CRTempName);
Database.AddInParameter(cmd, "CRTempPath", DbType.string, model.CRTempPath);
Database.AddInParameter(cmd, "MaterIden", DbType.string, model.MaterIden);
Database.AddInParameter(cmd, "IsEnable", DbType.bool, model.IsEnable);
Database.AddInParameter(cmd, "CateNo", DbType.string, model.CateNo);
Database.AddInParameter(cmd, "Remark", DbType.string, model.Remark);
Database.AddInParameter(cmd, "CreateId", DbType.string, model.CreateId);
Database.AddInParameter(cmd, "CreateDate", DbType.DateTime, model.CreateDate);
Database.AddInParameter(cmd, "LastModifyId", DbType.string, model.LastModifyId);
Database.AddInParameter(cmd, "LastModifyDate", DbType.DateTime, model.LastModifyDate);
Database.AddInParameter(cmd, "Deleted", DbType.bool, model.Deleted);


	<dxlc:LayoutItem Label="{x:Static res:Resources.Entity_P_CRTemp_CRTempName}">
		<dxe:TextEdit EditValue="{Binding CRTempName, NotifyOnSourceUpdated=True, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}"/>
	</dxlc:LayoutItem>
	<dxlc:LayoutItem Label="{x:Static res:Resources.Entity_P_CRTemp_CRTempPath}">
		<dxe:TextEdit EditValue="{Binding CRTempPath, NotifyOnSourceUpdated=True, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}"/>
	</dxlc:LayoutItem>
	<dxlc:LayoutItem Label="{x:Static res:Resources.Entity_P_CRTemp_MaterIden}">
		<dxe:TextEdit EditValue="{Binding MaterIden, NotifyOnSourceUpdated=True, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}"/>
	</dxlc:LayoutItem>
	<dxlc:LayoutItem Label="{x:Static res:Resources.Entity_P_CRTemp_IsEnable}">
		<dxe:TextEdit EditValue="{Binding IsEnable, NotifyOnSourceUpdated=True, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}"/>
	</dxlc:LayoutItem>
	<dxlc:LayoutItem Label="{x:Static res:Resources.Entity_P_CRTemp_CateNo}">
		<dxe:TextEdit EditValue="{Binding CateNo, NotifyOnSourceUpdated=True, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}"/>
	</dxlc:LayoutItem>
	<dxlc:LayoutItem Label="{x:Static res:Resources.Entity_P_CRTemp_Remark}">
		<dxe:TextEdit EditValue="{Binding Remark, NotifyOnSourceUpdated=True, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}"/>
	</dxlc:LayoutItem>
	<dxlc:LayoutItem Label="{x:Static res:Resources.Entity_P_CRTemp_Creater}">
		<dxe:TextEdit EditValue="{Binding Creater}"  Style="{StaticResource teCreateDate}"/>
	</dxlc:LayoutItem>
	<dxlc:LayoutItem Label="{x:Static res:Resources.Entity_P_CRTemp_CreateDate}">
		<dxe:TextEdit EditValue="{Binding CreateDate, NotifyOnSourceUpdated=True, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}"/>
	</dxlc:LayoutItem>
	<dxlc:LayoutItem Label="{x:Static res:Resources.Entity_P_CRTemp_LastModifyer}">
		<dxe:TextEdit EditValue="{Binding LastModifyer}" Style="{StaticResource teLastModifyDate}"/>
	</dxlc:LayoutItem>
	<dxlc:LayoutItem Label="{x:Static res:Resources.Entity_P_CRTemp_LastModifyDate}">
		<dxe:TextEdit EditValue="{Binding LastModifyDate, NotifyOnSourceUpdated=True, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}"/>
	</dxlc:LayoutItem>



		public string CRTempName
        {
            get
            {
                return Entity.CRTempName;
            }
            set
            {
                if (Entity.CRTempName != value)
                {
                    Entity.CRTempName = value;
                    RaisePropertyChanged("CRTempName");
                }
            }
        }
		public string CRTempPath
        {
            get
            {
                return Entity.CRTempPath;
            }
            set
            {
                if (Entity.CRTempPath != value)
                {
                    Entity.CRTempPath = value;
                    RaisePropertyChanged("CRTempPath");
                }
            }
        }
		public string MaterIden
        {
            get
            {
                return Entity.MaterIden;
            }
            set
            {
                if (Entity.MaterIden != value)
                {
                    Entity.MaterIden = value;
                    RaisePropertyChanged("MaterIden");
                }
            }
        }
		public bool IsEnable
        {
            get
            {
                return Entity.IsEnable;
            }
            set
            {
                if (Entity.IsEnable != value)
                {
                    Entity.IsEnable = value;
                    RaisePropertyChanged("IsEnable");
                }
            }
        }
		public string CateNo
        {
            get
            {
                return Entity.CateNo;
            }
            set
            {
                if (Entity.CateNo != value)
                {
                    Entity.CateNo = value;
                    RaisePropertyChanged("CateNo");
                }
            }
        }
		public string Remark
        {
            get
            {
                return Entity.Remark;
            }
            set
            {
                if (Entity.Remark != value)
                {
                    Entity.Remark = value;
                    RaisePropertyChanged("Remark");
                }
            }
        }
		public string Creater
        {
            get
            {
                return Entity.Creater;
            }
            set
            {
                if (Entity.Creater != value)
                {
                    Entity.Creater = value;
                    RaisePropertyChanged("Creater");
                }
            }
        }
		public DateTime CreateDate
        {
            get
            {
                return Entity.CreateDate;
            }
            set
            {
                if (Entity.CreateDate != value)
                {
                    Entity.CreateDate = value;
                    RaisePropertyChanged("CreateDate");
                }
            }
        }
		public string LastModifyer
        {
            get
            {
                return Entity.LastModifyer;
            }
            set
            {
                if (Entity.LastModifyer != value)
                {
                    Entity.LastModifyer = value;
                    RaisePropertyChanged("LastModifyer");
                }
            }
        }
		public DateTime LastModifyDate
        {
            get
            {
                return Entity.LastModifyDate;
            }
            set
            {
                if (Entity.LastModifyDate != value)
                {
                    Entity.LastModifyDate = value;
                    RaisePropertyChanged("LastModifyDate");
                }
            }
        }


